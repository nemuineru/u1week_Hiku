//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Nemuke Industry/1week_Hiku/Controller/Input_Basic.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Input_Basic: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Input_Basic()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Input_Basic"",
    ""maps"": [
        {
            ""name"": ""Base"",
            ""id"": ""b267d258-d06d-4f73-8017-783427c6fc93"",
            ""actions"": [
                {
                    ""name"": ""CursorPosition"",
                    ""type"": ""Value"",
                    ""id"": ""ead18ff9-19f9-4c0f-9fcb-9b2111f225a3"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Select_Click"",
                    ""type"": ""Value"",
                    ""id"": ""5aa7c70f-83e5-4a3c-b874-48aa5ed77416"",
                    ""expectedControlType"": ""Analog"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Attack_Click"",
                    ""type"": ""Value"",
                    ""id"": ""992cca55-222b-493e-8556-64cc467473fa"",
                    ""expectedControlType"": ""Analog"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ControllerAxis"",
                    ""type"": ""Value"",
                    ""id"": ""3fa2b177-4f46-410b-87a3-99d7481abc82"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""2d76b9d1-7d5a-4188-98df-b06c16a0570f"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CursorPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0fd50850-a384-402d-bf52-7f32aaa109a8"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select_Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0eb7aaf5-a2fb-48e8-b511-7afc143c4ad7"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack_Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Digital"",
                    ""id"": ""53f9ebba-dca2-4394-a6a8-0cb9b00733fe"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ControllerAxis"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""f25959af-51fe-49c6-b5dd-dd7c877a2b94"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ControllerAxis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""a83ff87d-db23-4d72-924c-e10af44955de"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ControllerAxis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""99d466dd-094e-4a95-bfce-3ec1ddd52c2b"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ControllerAxis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""54bc77be-a329-4528-bdcb-af902e2673c5"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ControllerAxis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""a9f31d9f-eefd-4314-b6d4-347d30adbb10"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ControllerAxis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Base
        m_Base = asset.FindActionMap("Base", throwIfNotFound: true);
        m_Base_CursorPosition = m_Base.FindAction("CursorPosition", throwIfNotFound: true);
        m_Base_Select_Click = m_Base.FindAction("Select_Click", throwIfNotFound: true);
        m_Base_Attack_Click = m_Base.FindAction("Attack_Click", throwIfNotFound: true);
        m_Base_ControllerAxis = m_Base.FindAction("ControllerAxis", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Base
    private readonly InputActionMap m_Base;
    private List<IBaseActions> m_BaseActionsCallbackInterfaces = new List<IBaseActions>();
    private readonly InputAction m_Base_CursorPosition;
    private readonly InputAction m_Base_Select_Click;
    private readonly InputAction m_Base_Attack_Click;
    private readonly InputAction m_Base_ControllerAxis;
    public struct BaseActions
    {
        private @Input_Basic m_Wrapper;
        public BaseActions(@Input_Basic wrapper) { m_Wrapper = wrapper; }
        public InputAction @CursorPosition => m_Wrapper.m_Base_CursorPosition;
        public InputAction @Select_Click => m_Wrapper.m_Base_Select_Click;
        public InputAction @Attack_Click => m_Wrapper.m_Base_Attack_Click;
        public InputAction @ControllerAxis => m_Wrapper.m_Base_ControllerAxis;
        public InputActionMap Get() { return m_Wrapper.m_Base; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BaseActions set) { return set.Get(); }
        public void AddCallbacks(IBaseActions instance)
        {
            if (instance == null || m_Wrapper.m_BaseActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_BaseActionsCallbackInterfaces.Add(instance);
            @CursorPosition.started += instance.OnCursorPosition;
            @CursorPosition.performed += instance.OnCursorPosition;
            @CursorPosition.canceled += instance.OnCursorPosition;
            @Select_Click.started += instance.OnSelect_Click;
            @Select_Click.performed += instance.OnSelect_Click;
            @Select_Click.canceled += instance.OnSelect_Click;
            @Attack_Click.started += instance.OnAttack_Click;
            @Attack_Click.performed += instance.OnAttack_Click;
            @Attack_Click.canceled += instance.OnAttack_Click;
            @ControllerAxis.started += instance.OnControllerAxis;
            @ControllerAxis.performed += instance.OnControllerAxis;
            @ControllerAxis.canceled += instance.OnControllerAxis;
        }

        private void UnregisterCallbacks(IBaseActions instance)
        {
            @CursorPosition.started -= instance.OnCursorPosition;
            @CursorPosition.performed -= instance.OnCursorPosition;
            @CursorPosition.canceled -= instance.OnCursorPosition;
            @Select_Click.started -= instance.OnSelect_Click;
            @Select_Click.performed -= instance.OnSelect_Click;
            @Select_Click.canceled -= instance.OnSelect_Click;
            @Attack_Click.started -= instance.OnAttack_Click;
            @Attack_Click.performed -= instance.OnAttack_Click;
            @Attack_Click.canceled -= instance.OnAttack_Click;
            @ControllerAxis.started -= instance.OnControllerAxis;
            @ControllerAxis.performed -= instance.OnControllerAxis;
            @ControllerAxis.canceled -= instance.OnControllerAxis;
        }

        public void RemoveCallbacks(IBaseActions instance)
        {
            if (m_Wrapper.m_BaseActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IBaseActions instance)
        {
            foreach (var item in m_Wrapper.m_BaseActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_BaseActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public BaseActions @Base => new BaseActions(this);
    public interface IBaseActions
    {
        void OnCursorPosition(InputAction.CallbackContext context);
        void OnSelect_Click(InputAction.CallbackContext context);
        void OnAttack_Click(InputAction.CallbackContext context);
        void OnControllerAxis(InputAction.CallbackContext context);
    }
}
